{
    "projects": [
      {
        "name": "Hop n' Hook",
        "description": "Hop n' Hook is a cross between a platformer and a fishing game, built by a team of 5 in 10 weeks using the Unity game engine. It has dozens of systems that smoothly interact with each other and the player to cause a fun experience for any player.\\n\\nTechnical Features/Contributions:\\nMap System: Includes a robust map system with a fog of war effect, allowing the users to plan out routes to revisit ponds while still encouraging exploration in order to fill in the gaps. The map data is generated automatically by pressing a button on the map script.\\nInteraction System: Contains a universally compatible interaction system allowing for all kinds of interactable objects to be placed throughout the world and easily hooked up to allow unique functionality.\\nProcedurally Generated Boss Fights: Leverages a custom procedural generation algorithm in order to generate unique maps for the player to get dragged through by massive fish bosses.\\nExtendable Popup System: The popup system built into Hop n' Hook can be extended for all kinds of popups through a generic abstract class base. For example, there are dialogue popups, interaction popups, fish caught popups, and confirmation popups all using the same system.\\nDynamic Slope System: Hop n' Hook features a system on slopes that alters behavior depending on various factors such as ground type and the steepness of the slope, which is all passed through a custom algorithm using linear algebra to determine how the player movement should be modified on the slope.",
        "itch": "",
        "github": "https://github.com/Jayvlyn/NGS",
        "steam": "",
        "other1": "https://hopnhook.com",
        "other2": "",
        "other3": "",
        "other4": ""
      },
      {
        "name": "Perlex TD",
        "description": "Perlex TD is a 2D tower defense game built using Unity and heavily inspired by the flash game 'The Last Shelter', showcasing a robust implementation of procedural map generation using Perlin noise. This technique creates an effectively infinite number of unique levels, each presenting distinct strategic challenges for the player. The game focuses on strategic tower placement, upgrade management, and adaptive defense against diverse enemy types and increasingly difficult wave patterns. \\n\\nTechnical Highlights: \\nProcedural Map Generation: Leverages Perlin noise algorithms for creating unique and varied level layouts, eliminating the need for manually designed levels and ensuring high replayability. \\nUnity Game Engine: Developed entirely within the Unity game engine, utilizing its robust features for 2D game development, including physics and UI systems. \\nEnemy AI: Implementation of sophisticated enemy AI with complex yet efficient pathfinding, creating dynamic and challenging gameplay. \\nTower Upgrade System: A well-structured tower upgrade system allowing players to customize their defenses and adapt to different enemy types and map layouts. \\nEfficient Resource Management: Optimized resource management to ensure smooth performance even with a large number of game objects and complex calculations.",
        "itch": "https://zeadrasil.itch.io/perlex-td",
        "github": "https://github.com/Zeadrasil/Capstone",
        "steam": "",
        "other1": "",
        "other2": "",
        "other3": "",
        "other4": ""
      },
      {
        "name": "Neumont Slot Machine",
        "description": "The Neumont Slot Machine is a slot machine built using the Unity game engine, primarily intended for entertainment use by the Neumont Casino Club. It was built using the contributions of one other student and the assistance of one professor.\\n\\nTechnical Highlights/Contributions:\\nConfigurable Expected Returns: The average amount that each spin wins (relative to how much was bet on the spin) is entirely configurable by the individual manning the slot machine, enabling the handler to determine what the optimal level is to keep club members at events interested while still preventing excessively long queues from forming.\\nFully Developed Win Table: A custom algorithm efficiently determines how much each spin wins.\\nRandom Wheel Ordering: A custom script guarantees that each time the game is launched each wheel is in a different order, preventing long-term memorization of wheel patterns. Additionally, each wheel has a random modifier applied to its stop time, guaranteeing that the exact reward cannot be predicted.\\nWheel Snapping: Wheels will automatically move a little after they are stopped to position the current image in the center of the screen, Allowing users to more easily tell what their results are.",
        "itch": "",
        "github": "https://github.com/Zeadrasil/NeumontGamblingProject",
        "steam": "",
        "other1": "",
        "other2": "",
        "other3": "",
        "other4": ""
      },
      {
        "name": "GenRun",
        "description": "GenRun is a 2D infinite runner built using Unity and heavily inspired by the videogame 'SpeedRunners', representing a sophisticated blend of procedural generation and precise physics integration. Its development involved a meticulous process, balancing player feel with technical efficiency.\\n\\nTechnical Highlights:\\nUnity Game Engine: Unity was chosen for its robust 2D capabilities, ease of use, and extensive community support.\\nProcedural Map Generation: GenRun strategically places level sections to create challenging but navigable pathways. This is done by randomly selecting a premade level section while combining sections in a way that is guaranteed to be unique each time.\\nPhysics: GenRun uses the Unity Raycasting system for all physics, significantly improving on both accuracy and performance over the built-in rigidbody system.\\nInput Handling: The system is designed for keyboard and mouse input, with all keyboard actions being remappable to new binds.\\nUI: Unity's UI system manages the in-game display of information such as score and time remaining.",
        "itch": "https://zeadrasil.itch.io/genrun",
        "github": "https://github.com/Zeadrasil/GenRun",
        "steam": "",
        "other1": "",
        "other2": "",
        "other3": "",
        "other4": ""
      }
    ]
  }